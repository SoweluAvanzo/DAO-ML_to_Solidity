asm DAOML

{{"import ../lib/StandardLibrary"}}


signature : 
    abstract domain User
    abstract domain Permission
    abstract domain Entity
    abstract domain GovernanceArea
    enum domain EntityType = {{"{"}}ROLE, COMMITTEE{{"}"}}
    enum domain Operation = {{"{"}}ASSIGNROLE, REVOKEROLE, GRANTPERM, REVOKEPERM{% if custom_operations is not none %}{% for c_o in custom_operations %}, {{c_o.name}}{% endfor %}{% endif %} {{"}"}}

	
    controlled controls : Prod(Entity, Entity) -> Boolean
    
    controlled associate : Prod(Entity, Permission) -> Boolean

    controlled aggregationRole : Entity -> Entity
    controlled aggregationCommittee : Entity -> Entity

    controlled into : Permission -> GovernanceArea

    controlled roles : User -> Entity

    controlled type : Entity -> EntityType

    // Roles
    {% for role_data in roles %}
    static {{role_data.name}} : Entity
    {% endfor %}
    static owner_role : Entity // for owner - controls all the roles - has all the permissions

    // Committees
    {% for committee_data in committees %}
    static {{committee_data.name}} : Entity
    {% endfor %}
    // Permissions
    {% for permission_data in permissions %}
    static {{permission_data.name}} : Entity
    {% endfor %}   

    // Governance Areas
    {% for governanceArea_name in governanceAreas %}
    static {{governanceArea_name}} : Entity
    {% endfor %}
    // Users
    {% if users %}
        {% for user_data in users %}
    static {{user_data.name}} : Entity
        {% endfor %}
    {% endif %}
    static owner : User

    derived controlledBy : Prod(Entity, Entity) -> Boolean
    derived hasPermission : Prod(Entity, Permission) -> Boolean

    // Monitored functions (sender actions)
    monitored sender : User
    monitored mUser : User
    monitored mEntity : Entity
    monitored mPermission : Permission
    monitored mOperation : Operation

definitions : 

    function controlledBy ($e in Entity, $sender in Entity) =
        if controls{{"("}}$sender, $e{{")"}} then
            true
        else
        	if isDef(aggregationRole($sender)) then
                controlledBy(aggregationRole($sender), $e)
            else 
            	if isDef(aggregationCommittee($sender)) then
            		controlledBy(aggregationCommittee($sender), $e)
            	else
                	false
                endif
            endif
        endif
        

    function hasPermission ($e in Entity, $p in Permission) = 
        if associate($e, $p) then
            true
        else
            if isDef(aggregationRole($e)) then
                hasPermission(aggregationRole($e), $p)
            else
                if isDef(aggregationCommittee($e)) then
            		hasPermission(aggregationCommittee($e), $p)
            	else
                	false
                endif
            endif
        endif


    rule r_assignRole ($u in User, $e in Entity) = 
	    if isDef(roles($u)) then
	        if controlledBy(roles($u), roles(sender)) and controlledBy($e, roles(sender)) then 
	            roles($u) := $e
	        endif
	    else
	    	if controlledBy($e, roles(sender)) then
	    		roles($u) := $e
	    	endif
	    endif

    rule r_revokeRole ($u in User, $e in Entity) = 
	    if isDef(roles($u)) then
	        if controlledBy(roles($u), roles(sender)) and controlledBy($e, roles(sender)) then 
	            roles($u) := undef
	        endif
	    endif

    rule r_grantPermission ($e in Entity, $p in Permission) = 
        if hasPermission(roles(sender), $p) and controlledBy(roles(sender), $e) then 
            associate($e, $p) := true
        endif

    rule r_revokePermission ($e in Entity, $p in Permission) = 
        if hasPermission(roles(sender), $p) and controlledBy(roles(sender), $e) then 
            associate($e, $p) := false
        endif


    invariant over hasPermission : (not hasPermission(institutional_representative, update_duration_user_block)) and (not hasPermission(institutional_representative, update_number_council_partecipants))


    main rule r_Main = 
        if isDef(roles(sender)) then
            switch mOperation
                case ASSIGNROLE : r_assignRole[mUser, mEntity]
                case REVOKEROLE : r_revokeRole[mUser, mEntity]
                case GRANTPERM : r_grantPermission[mEntity, mPermission]
                case REVOKEPERM : r_revokePermission[mEntity, mPermission]
                {% if custom_operations is not none %}
                    {% for c_o in custom_operations %}
                case {{c_o.name}} : r_{{c_o.rule_invokation_name}}[ {% for p in c_o.parameters_list %} {% if loop.first %}, {% endif %} {{p}} {% endfor %} ]
                    {% endfor %}
                {% endif %}
            endswitch
        endif

        


default init s0:

    function controls ($owner in Entity, $control in Entity) = 
        switch $owner
            {% for committee_data in committees %}
            case {{committee_data.name}} :
                {% if (committee_data.controls | length) > 0 %}
                switch $control
                    {% for controlled_by_committee in committee_data.controls %}
                    case {{controlled_by_committee}} : true
                    {% endfor %}
                    otherwise false
                endswitch
                {% else %}false{% endif %}
            {% endfor %}

            case owner_role : 
                switch $control
                    {% for role_data in roles %}
                    case {{role_data.name}} : true
                    {% endfor %}
                    {% for committee_data in committees %}
                    case {{committee_data.name}} : true
                    {% endfor %}
                    otherwise false
                endswitch

            {% for role_data in roles %}
            case {{role_data.name}} :
                {% if (role_data.controls | length) > 0 %}
                switch $control
                    {% for controlled_by_role in role_data.controls %}
                    case {{controlled_by_role}} : true
                    {% endfor %}
                    otherwise false
                endswitch
                {% else %}false{% endif %}
            {% endfor %}
            otherwise false
        endswitch

    function associate($e in Entity, $p in Permission) = 
        switch $e
            {% for role_data in roles %}
                {% if (role_data.permissions | length) > 0 %}
            case {{role_data.name}} :
                switch $p
                    {% for perm in role_data.permissions %}
                    case {{perm}} : true
                    {% endfor %}
                    otherwise false
                endswitch
                {% endif %}
            {% endfor %}
            
            {% for committee_data in committees %}
                {% if (committee_data.permissions | length) > 0 %}
            case {{committee_data.name}} :
                switch $p
                    {% for perm in committee_data.permissions %}
                    case {{perm}} : true
                    {% endfor %}
                    otherwise false
                endswitch
                {% endif %}
            {% endfor %}

            case owner_role : 
                switch $p
                {% for perm in permissions %}
                    case {{perm.name}} : true
                {% endfor %}
                    otherwise false
                endswitch
            
            otherwise false
        endswitch

    function aggregationRole ($e in Entity) =
	    if type($e) = ROLE then
            {% if (roles | length) > 0 %}
	        switch $e
                {% for role_data in roles %}
                    {% if (role_data.aggregation | default('', true)) != '' %}
                case {{role_data.name}} : {{role_data.aggregation}}
                    {% endif %}
                {% endfor %}
	            otherwise undef
	        endswitch
            {% else %}
            undef
            {% endif %}
        endif
        
    function aggregationCommittee ($e in Entity) =
        if type($e) = COMMITTEE then
            {% if (committees | length) > 0 %}
        	switch $e
                {% for committee_data in committees %}
                    {% if (committee_data.aggregation | default('', true)) != '' %}
                case {{committee_data.name}} : {{committee_data.aggregation}}
                    {% endif %}
                {% endfor %}
	            otherwise undef
	        endswitch
            {% else %}
            undef
            {% endif %}
       	endif

    function into ($p in Permission) = 
        {% if (permissions | length) > 0 %}
        switch $p
            {% for permission_data in permissions %}
            case {{permission_data.name}} : {{permission_data.governanceArea}}
            {% endfor %}
        endswitch
        {% else %}
        undef
        {% endif %}

    function roles ($u in User) = 
        switch $u 
            case owner : owner_role
            {% for user_data in users %}
                {% if user_data.name != "owner" %}case {{user_data.name}} : {{user_data.defaultRole}}{% endif %}
            {% endfor %}
        endswitch
        
    function type ($e in Entity) =
        switch $e
            {% if (roles | length) > (committees | length) %}
                {% for committee_data in committees %}
            case {{committee_data.name}} : COMMITTEE
                {% endfor %}
            otherwise ROLE
            {% else %}
                {% for role_data in roles %}
            case {{role_data.name}} : ROLE
                {% endfor %}
            otherwise COMMITTEE
            {% endif %}
        endswitch
