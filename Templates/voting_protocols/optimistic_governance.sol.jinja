// SPDX-License-Identifier: MIT
pragma solidity {{solidity_version}};

// @title {{contract_name}} in {{dao_name}}, using the {{decision_making_method_name}}

{% for import in imports %}
{{ import }}
{% endfor %}

contract {{contract_name}} is Governor, GovernorSettings, GovernorCountingSimple, GovernorVotes, GovernorVotesQuorumFraction{{inherited_contracts}} {

    // State variables
    {{state_var_declarations}}

    // New variables for optimistic governance
    struct Proposal {
        bool challenged;
        uint256 creationTime;
        bool executed;
    }

    uint256 public challengePeriod; // Duration of the challenge period in blocks or seconds
    mapping(uint256 => Proposal) public proposals; // Track the status of each proposal

    // Constructor
    constructor(IVotes _token{{constructor_parameters}}, uint256 _challengePeriod)
        Governor("{{contract_name}}")
        GovernorSettings(7200 /* 1 day */, 50400 /* 1 week */, 0)
        GovernorVotes(_token)
        GovernorVotesQuorumFraction(0)
    {
        challengePeriod = _challengePeriod; // Set the challenge period duration
        {{constructor_actions}}
    }

    // Propose a new governance action
    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)
        public
        override
        returns (uint256)
    {
        {{proposal_requirement}}

        uint256 proposalId = super.propose(targets, values, calldatas, description);

        // Create a new proposal in pending state, can be challenged within the challenge period
        proposals[proposalId] = Proposal({
            challenged: false,
            creationTime: block.timestamp,
            executed: false
        });

        return proposalId;
    }

    // Function to challenge a proposal within the challenge period
    function challengeProposal(uint256 proposalId) public {
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.challenged, "Proposal already challenged");
        require(block.timestamp < proposal.creationTime + challengePeriod, "Challenge period expired");

        proposal.challenged = true;

        // Further logic can go here (e.g., initiating a voting process if challenged)
    }

    // Execute proposal optimistically after the challenge period if not challenged
    function executeProposal(uint256 proposalId) public {
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.executed, "Proposal already executed");
        require(!proposal.challenged, "Proposal has been challenged and needs a vote");
        require(block.timestamp >= proposal.creationTime + challengePeriod, "Challenge period not over");

        // Execute the proposal using the inherited Governor functions
        super.execute(proposalId);

        proposal.executed = true;
    }

    // Override the castVote function to handle normal proposals (in case of challenge)
    function castVote(uint256 proposalId, uint8 support)
        public
        override
        returns (uint256)
    {
        Proposal storage proposal = proposals[proposalId];
        require(proposal.challenged, "Cannot vote on an unchallenged proposal");

        {{vote_requirement}}
        return super.castVote(proposalId, support);
    }

    // Override other Governor functions as necessary
    function votingDelay()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.votingDelay();
    }

    function votingPeriod()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.votingPeriod();
    }

    function quorum(uint256 blockNumber)
        public
        view
        override(Governor, GovernorVotesQuorumFraction)
        returns (uint256)
    {
        return super.quorum(blockNumber);
    }

    function proposalThreshold()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.proposalThreshold();
    }
}
