// SPDX-License-Identifier: MIT
pragma solidity {{solidity_version}};

// @title {{contract_name}} in {{dao_name}}, using the {{decision_making_method_name}} protocol

{% for import in imports %}
{{ import }}
{% endfor %}

contract {{contract_name}} is Governor, GovernorSettings, GovernorVotes, GovernorVotesQuorumFraction {{inherited_contracts}} {

    // State variables
    {{state_var_declarations}}
    struct Proposal {
        bool vetoed;
        uint256 creationTime;
        bool executed;
    }

    uint256 public challengePeriod; // Duration of the challenge period
    mapping(uint256 => Proposal) public proposals; // Track the status of proposals

    // Constructor
    constructor(IVotes _token,{{constructor_parameters}}, uint256 _challengePeriod)
        Governor({{contract_name}})
        GovernorSettings(7200 /* 1 day */, 50400 /* 1 week */, 0)
        GovernorVotes(_token)
        GovernorVotesQuorumFraction(0)
    {
        {{constructor_actions}}
        challengePeriod = _challengePeriod; // Set the challenge period duration
    }

    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)
        public
        override
        returns (uint256)
    {
        {{proposal_requirement}}
        uint256 proposalId = super.propose(targets, values, calldatas, description);
        // Create a new proposal in pending state, can be vetoed within the challenge period
        proposals[proposalId] = Proposal({
            vetoed: false,
            creationTime: block.timestamp,
            executed: false
        });

        return proposalId;
    }

    // Function to veto a proposal within the challenge period
    function vetoProposal(uint256 proposalId) public {
        {{vote_requirement}}
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.vetoed, "Proposal already vetoed");
        require(block.timestamp < proposal.creationTime + challengePeriod, "Challenge period expired");

        proposal.vetoed = true;
    }

    // Execute proposal optimistically after the challenge period if not vetoed
    function executeProposal(uint256 proposalId) public {
        Proposal storage proposal = proposals[proposalId];
        require(!proposal.executed, "Proposal already executed");
        require(block.timestamp >= proposal.creationTime + challengePeriod, "Challenge period not over");

        // If the proposal is vetoed, prevent execution
        require(!proposal.vetoed, "Proposal has been vetoed");

        // Execute the proposal using the inherited Governor functions
        super.execute(proposalId);

        proposal.executed = true;
    }

    // Override other Governor functions as necessary
    function votingDelay()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.votingDelay();
    }

    function votingPeriod()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.votingPeriod();
    }

    function quorum(uint256 blockNumber)
        public
        view
        override(Governor, GovernorVotesQuorumFraction)
        returns (uint256)
    {
        return super.quorum(blockNumber);
    }

    function proposalThreshold()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.proposalThreshold();
    }
}
