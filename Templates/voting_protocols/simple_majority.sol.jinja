// SPDX-License-Identifier: MIT
pragma solidity {{solidity_version}};

// @title {{contract_name}} in {{dao_name}}, using the {{decision_making_method_name}} protocol

{% if is_custom %}
import "@openzeppelin/contracts/governance/Governor.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol";
import "./interfaces/IPermissionManager.sol";
{% endif %}

contract {{contract_name}} is Governor, GovernorSettings, GovernorCountingSimple, GovernorVotes, GovernorVotesQuorumFraction{{inherited_contracts}} {
    
    // State variables
    { % if is_custom % }IPermissionManager public permissionManager;{% endif %}

    // Constructor
    constructor(IVotes _token{ % if is_custom % }, {% for param in constructor_parameters%}{% if loop.index0 != 0 %}, {% endif %}{{param.param_type}} {{param.param_name}}{% endfor %} {% endif %})
        Governor("{{contract_name}}")
        GovernorSettings(7200 /* 1 day */, 50400 /* 1 week */, 0)
        GovernorVotes(_token)
        GovernorVotesQuorumFraction(0)
    {
        { % if is_custom % }permissionManager = IPermissionManager(_permissionManager);{% endif %}
    }

    function castVote(uint256 proposalId, uint8 support)
        public
        override
        returns (uint256)
    {
        { % if is_custom % }{% if optimized %}require(permissionManager.canVote(msg.sender, {{voting_permission_index}}), "User cannot vote");{% else %}require(permissionManager.isCommitteeMember(msg.sender, {{voting_permission_index}})==1, "User cannot vote");{% endif %}{% endif %}
        return super.castVote(proposalId, support);
    }

    // Override proposal logic to include permission check before proposing
    function propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description)
        public
        override
        returns (uint256)
    {
        { % if is_custom % }{% if optimized %}require(permissionManager.canPropose(msg.sender, {{proposal_permission_index}}), "User cannot propose");{% else %}require(permissionManager.isCommitteeMember(msg.sender, {{proposal_permission_index}})==2, "User cannot propose");{% endif %}{% endif %}
        return super.propose(targets, values, calldatas, description);
    }

    function votingDelay()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.votingDelay();
    }

    function votingPeriod()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.votingPeriod();
    }

    function quorum(uint256 blockNumber)
        public
        view
        override(Governor, GovernorVotesQuorumFraction)
        returns (uint256)
    {
        return super.quorum(blockNumber);
    }

    function proposalThreshold()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.proposalThreshold();
    }
    
}
